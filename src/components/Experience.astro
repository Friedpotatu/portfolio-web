---
import { getCollection, render } from 'astro:content';

// Obtener todas las experiencias y ordenarlas
const experiences = await getCollection('experience');
const sortedExperiences = experiences.sort((a, b) => a.data.order - b.data.order);

// Renderizar el contenido de cada experiencia
const renderedExperiences = await Promise.all(
    sortedExperiences.map(async (experience) => {
        const { Content } = await render(experience);
        return {
            ...experience,
            Content
        };
    })
);

// Función para obtener el color de la tecnología
function getTechColor(tech: string): string {
    const techColors: Record<string, string> = {
        'Laravel 12': 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200',
        'Laravel 8': 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200',
        'Bootstrap 5': 'bg-violet-100 dark:bg-violet-900 text-violet-800 dark:text-violet-200',
        'Tailwind CSS': 'bg-sky-100 dark:bg-sky-900 text-sky-800 dark:text-sky-200',
        'MariaDB': 'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200',
        'Django': 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200',
        'Random Forest': 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200',
        'SQLite': 'bg-cyan-100 dark:bg-cyan-900 text-cyan-800 dark:text-cyan-200',
        'SQL Anywhere': 'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200',
        'Python': 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200',
        'Livewire': 'bg-violet-100 dark:bg-violet-900 text-violet-800 dark:text-violet-200',
        'Blade': 'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200',
        'PowerBuilder': 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200',
        'Notion': 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200',
        'Scikit-learn': 'bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200',
        'Pandas': 'bg-teal-100 dark:bg-teal-900 text-teal-800 dark:text-teal-200',
        'Matplotlib': 'bg-pink-100 dark:bg-pink-900 text-pink-800 dark:text-pink-200'
    };
    
    return techColors[tech] || 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';
}

// Función para formatear fechas
function formatDate(dateString: string): string {
    const months = [
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    ];
    
    const [year, month] = dateString.split('-');
    return `${months[parseInt(month) - 1]} ${year}`;
}

// Función para crear el rango de fechas
function getDateRange(startDate: string, endDate?: string, current?: boolean): string {
    const start = formatDate(startDate);
    
    if (current) {
        return `${start} - Presente`;
    }
    
    if (endDate) {
        const end = formatDate(endDate);
        return `${start} - ${end}`;
    }
    
    return start;
}
---

<div class="max-w-4xl mx-auto">
    <h2 class="text-4xl md:text-5xl font-bold text-center text-gray-900 dark:text-white mb-16">
        Experiencia
    </h2>

    <div class="space-y-8">
        {renderedExperiences.map((experience) => (
            <div class="bg-white dark:bg-neutral-900 p-6 rounded-2xl border border-gray-200 dark:border-neutral-700">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
                    <div>
                        <h3 class="text-2xl font-semibold text-black dark:text-white">
                            {experience.data.title}
                        </h3>
                        <p class="text-lg text-blue-600 dark:text-blue-400">
                            {experience.data.company}
                        </p>
                        {experience.data.location && (
                            <p class="text-sm text-gray-500 dark:text-gray-400">
                                {experience.data.location}
                            </p>
                        )}
                    </div>
                    <span class="text-gray-500 dark:text-gray-400 font-medium mt-2 md:mt-0">
                        {getDateRange(experience.data.startDate, experience.data.endDate, experience.data.current)}
                    </span>
                </div>

                {/* Descripción principal del markdown */}
                <div class="text-gray-600 dark:text-gray-300 leading-relaxed mb-4 prose prose-sm dark:prose-invert max-w-none">
                    <experience.Content />
                </div>

                {/* Aspectos destacados */}
                {experience.data.highlights && experience.data.highlights.length > 0 && (
                    <div class="mb-4">
                        <span class="text-gray-600 dark:text-gray-400 font-bold block mb-2">
                            Aspectos destacados:
                        </span>
                        <ul class="list-disc pl-5 text-gray-600 dark:text-gray-300 leading-relaxed space-y-1">
                            {experience.data.highlights.map((highlight) => (
                                <li>{highlight}</li>
                            ))}
                        </ul>
                    </div>
                )}

                {/* Tecnologías */}
                <div class="flex flex-wrap gap-2">
                    {experience.data.technologies.map((tech) => (
                        <span class={`px-3 py-1 rounded-full text-sm ${getTechColor(tech)}`}>
                            {tech}
                        </span>
                    ))}
                </div>
            </div>
        ))}
    </div>
</div>