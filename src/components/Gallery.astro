---
// src/components/Gallery.astro
import { Image } from 'astro:assets';

interface Props {
    images: Array<{
        src: string;
        alt: string;
        caption?: string;
    }>;
    projectTitle: string;
}

const { images, projectTitle } = Astro.props;
---

<div class="gallery-container max-w-6xl mx-auto p-4">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {images.map((image, index) => (
            <div 
                class="gallery-item cursor-pointer group"
                data-index={index}
            >
                <div class="relative overflow-hidden rounded-lg bg-gray-100 dark:bg-gray-800 aspect-video">
                    <img
                        src={image.src}
                        alt={image.alt}
                        loading="lazy"
                        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                    />
                    <div class="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300"></div>
                </div>
                {image.caption && (
                    <p class="mt-2 text-sm text-gray-600 dark:text-gray-400 text-center">
                        {image.caption}
                    </p>
                )}
            </div>
        ))}
    </div>
</div>

<!-- Modal para vista ampliada -->
<div id="gallery-modal" class="fixed inset-0 bg-black/90 z-50 hidden items-center justify-center p-4">
    <div class="relative max-w-4xl max-h-[90vh] w-full">
        <button 
            id="close-modal"
            class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors z-10"
            aria-label="Cerrar galería"
        >
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
        
        <div class="relative">
            <img 
                id="modal-image"
                src=""
                alt=""
                class="w-full h-full object-contain rounded-lg"
            />
            
            <!-- Navegación -->
            <button 
                id="prev-btn"
                class="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full transition-colors"
                aria-label="Imagen anterior"
            >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
            </button>
            
            <button 
                id="next-btn"
                class="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full transition-colors"
                aria-label="Siguiente imagen"
            >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
            </button>
        </div>
        
        <div class="mt-4 text-center">
            <p id="modal-caption" class="text-white text-sm"></p>
            <p class="text-gray-300 text-xs mt-1">
                <span id="current-index">1</span> de <span id="total-images">{images.length}</span>
            </p>
        </div>
    </div>
</div>

<script define:vars={{ images, projectTitle }}>
    let currentIndex = 0;
    
    // Elementos del DOM
    const modal = document.getElementById('gallery-modal');
    const modalImage = document.getElementById('modal-image');
    const modalCaption = document.getElementById('modal-caption');
    const currentIndexEl = document.getElementById('current-index');
    const closeBtn = document.getElementById('close-modal');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const galleryItems = document.querySelectorAll('.gallery-item');
    
    // Función para abrir modal
    function openModal(index) {
        currentIndex = index;
        updateModalContent();
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden';
    }
    
    // Función para cerrar modal
    function closeModal() {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
    }
    
    // Función para actualizar contenido del modal
    function updateModalContent() {
        const image = images[currentIndex];
        modalImage.src = image.src;
        modalImage.alt = image.alt;
        modalCaption.textContent = image.caption || '';
        currentIndexEl.textContent = (currentIndex + 1).toString();
    }
    
    // Función para ir a la siguiente imagen
    function nextImage() {
        currentIndex = (currentIndex + 1) % images.length;
        updateModalContent();
    }
    
    // Función para ir a la imagen anterior
    function prevImage() {
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        updateModalContent();
    }
    
    // Event listeners
    galleryItems.forEach((item, index) => {
        item.addEventListener('click', () => openModal(index));
    });
    
    closeBtn.addEventListener('click', closeModal);
    nextBtn.addEventListener('click', nextImage);
    prevBtn.addEventListener('click', prevImage);
    
    // Cerrar modal al hacer clic fuera de la imagen
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });
    
    // Navegación con teclado
    document.addEventListener('keydown', (e) => {
        if (!modal.classList.contains('hidden')) {
            switch (e.key) {
                case 'Escape':
                    closeModal();
                    break;
                case 'ArrowLeft':
                    prevImage();
                    break;
                case 'ArrowRight':
                    nextImage();
                    break;
            }
        }
    });
</script>